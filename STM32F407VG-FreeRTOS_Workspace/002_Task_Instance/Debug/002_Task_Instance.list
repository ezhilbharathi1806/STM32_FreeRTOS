
002_Task_Instance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002484  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002614  08002614  00003614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002640  08002640  00004008  2**0
                  CONTENTS
  4 .ARM          00000000  08002640  08002640  00004008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002640  08002640  00004008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002640  08002640  00003640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002644  08002644  00003644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08002648  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004008  2**0
                  CONTENTS
 10 .bss          00001d80  20000008  20000008  00004008  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d88  20001d88  00004008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY
 13 .debug_info   000053ae  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000100e  00000000  00000000  000093e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004f0  00000000  00000000  0000a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c0  00000000  00000000  0000a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180e5  00000000  00000000  0000aca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006161  00000000  00000000  00022d8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000941df  00000000  00000000  00028eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bd0cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001378  00000000  00000000  000bd110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000be488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000008 	.word	0x20000008
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080025fc 	.word	0x080025fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	080025fc 	.word	0x080025fc

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000240:	d103      	bne.n	800024a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	691b      	ldr	r3, [r3, #16]
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e00c      	b.n	8000264 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	3308      	adds	r3, #8
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	e002      	b.n	8000258 <vListInsert+0x2e>
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	429a      	cmp	r2, r3
 8000262:	d2f6      	bcs.n	8000252 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	685a      	ldr	r2, [r3, #4]
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	683a      	ldr	r2, [r7, #0]
 8000272:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	68fa      	ldr	r2, [r7, #12]
 8000278:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	683a      	ldr	r2, [r7, #0]
 800027e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	1c5a      	adds	r2, r3, #1
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	601a      	str	r2, [r3, #0]
}
 8000290:	bf00      	nop
 8000292:	3714      	adds	r7, #20
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr

0800029c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	6892      	ldr	r2, [r2, #8]
 80002b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	6852      	ldr	r2, [r2, #4]
 80002bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	687a      	ldr	r2, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d103      	bne.n	80002d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	1e5a      	subs	r2, r3, #1
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	681b      	ldr	r3, [r3, #0]
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80002fa:	2301      	movs	r3, #1
 80002fc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d10b      	bne.n	8000320 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	f3bf 8f6f 	isb	sy
 8000314:	f3bf 8f4f 	dsb	sy
 8000318:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000320:	693b      	ldr	r3, [r7, #16]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d05d      	beq.n	80003e2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000326:	693b      	ldr	r3, [r7, #16]
 8000328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800032a:	2b00      	cmp	r3, #0
 800032c:	d059      	beq.n	80003e2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800032e:	693b      	ldr	r3, [r7, #16]
 8000330:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000332:	693b      	ldr	r3, [r7, #16]
 8000334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000336:	2100      	movs	r1, #0
 8000338:	fba3 2302 	umull	r2, r3, r3, r2
 800033c:	2b00      	cmp	r3, #0
 800033e:	d000      	beq.n	8000342 <xQueueGenericReset+0x52>
 8000340:	2101      	movs	r1, #1
 8000342:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14c      	bne.n	80003e2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000348:	f001 fdb8 	bl	8001ebc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	693b      	ldr	r3, [r7, #16]
 8000352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000354:	6939      	ldr	r1, [r7, #16]
 8000356:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000358:	fb01 f303 	mul.w	r3, r1, r3
 800035c:	441a      	add	r2, r3
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	2200      	movs	r2, #0
 8000366:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	693b      	ldr	r3, [r7, #16]
 800036e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000378:	3b01      	subs	r3, #1
 800037a:	6939      	ldr	r1, [r7, #16]
 800037c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800037e:	fb01 f303 	mul.w	r3, r1, r3
 8000382:	441a      	add	r2, r3
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	22ff      	movs	r2, #255	@ 0xff
 800038c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000390:	693b      	ldr	r3, [r7, #16]
 8000392:	22ff      	movs	r2, #255	@ 0xff
 8000394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d114      	bne.n	80003c8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	691b      	ldr	r3, [r3, #16]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d01a      	beq.n	80003dc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	3310      	adds	r3, #16
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 ff26 	bl	80011fc <xTaskRemoveFromEventList>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d012      	beq.n	80003dc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <xQueueGenericReset+0x120>)
 80003b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	f3bf 8f4f 	dsb	sy
 80003c2:	f3bf 8f6f 	isb	sy
 80003c6:	e009      	b.n	80003dc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	3310      	adds	r3, #16
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff feff 	bl	80001d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003d2:	693b      	ldr	r3, [r7, #16]
 80003d4:	3324      	adds	r3, #36	@ 0x24
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff fefa 	bl	80001d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003dc:	f001 fda0 	bl	8001f20 <vPortExitCritical>
 80003e0:	e001      	b.n	80003e6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d10b      	bne.n	8000404 <xQueueGenericReset+0x114>
        __asm volatile
 80003ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80003f0:	f383 8811 	msr	BASEPRI, r3
 80003f4:	f3bf 8f6f 	isb	sy
 80003f8:	f3bf 8f4f 	dsb	sy
 80003fc:	60bb      	str	r3, [r7, #8]
    }
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000404:	697b      	ldr	r3, [r7, #20]
}
 8000406:	4618      	mov	r0, r3
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	e000ed04 	.word	0xe000ed04

08000414 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	@ 0x28
 8000418:	af02      	add	r7, sp, #8
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	4613      	mov	r3, r2
 8000420:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d02e      	beq.n	800048a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800042c:	2100      	movs	r1, #0
 800042e:	68ba      	ldr	r2, [r7, #8]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	fba3 2302 	umull	r2, r3, r3, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d000      	beq.n	800043c <xQueueGenericCreate+0x28>
 800043a:	2101      	movs	r1, #1
 800043c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800043e:	2b00      	cmp	r3, #0
 8000440:	d123      	bne.n	800048a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800044a:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 800044e:	d81c      	bhi.n	800048a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	68ba      	ldr	r2, [r7, #8]
 8000454:	fb02 f303 	mul.w	r3, r2, r3
 8000458:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	3348      	adds	r3, #72	@ 0x48
 800045e:	4618      	mov	r0, r3
 8000460:	f001 fe0a 	bl	8002078 <pvPortMalloc>
 8000464:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d01d      	beq.n	80004a8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800046c:	69fb      	ldr	r3, [r7, #28]
 800046e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	3348      	adds	r3, #72	@ 0x48
 8000474:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	69fb      	ldr	r3, [r7, #28]
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	4613      	mov	r3, r2
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	68b9      	ldr	r1, [r7, #8]
 8000482:	68f8      	ldr	r0, [r7, #12]
 8000484:	f000 f815 	bl	80004b2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000488:	e00e      	b.n	80004a8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10b      	bne.n	80004a8 <xQueueGenericCreate+0x94>
        __asm volatile
 8000490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000494:	f383 8811 	msr	BASEPRI, r3
 8000498:	f3bf 8f6f 	isb	sy
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	613b      	str	r3, [r7, #16]
    }
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004a8:	69fb      	ldr	r3, [r7, #28]
    }
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
 80004be:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d103      	bne.n	80004ce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004c6:	69bb      	ldr	r3, [r7, #24]
 80004c8:	69ba      	ldr	r2, [r7, #24]
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	e002      	b.n	80004d4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80004d4:	69bb      	ldr	r3, [r7, #24]
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80004da:	69bb      	ldr	r3, [r7, #24]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004e0:	2101      	movs	r1, #1
 80004e2:	69b8      	ldr	r0, [r7, #24]
 80004e4:	f7ff ff04 	bl	80002f0 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08c      	sub	sp, #48	@ 0x30
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000506:	2b00      	cmp	r3, #0
 8000508:	d10b      	bne.n	8000522 <xQueueReceive+0x32>
        __asm volatile
 800050a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800050e:	f383 8811 	msr	BASEPRI, r3
 8000512:	f3bf 8f6f 	isb	sy
 8000516:	f3bf 8f4f 	dsb	sy
 800051a:	623b      	str	r3, [r7, #32]
    }
 800051c:	bf00      	nop
 800051e:	bf00      	nop
 8000520:	e7fd      	b.n	800051e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d103      	bne.n	8000530 <xQueueReceive+0x40>
 8000528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800052c:	2b00      	cmp	r3, #0
 800052e:	d101      	bne.n	8000534 <xQueueReceive+0x44>
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <xQueueReceive+0x46>
 8000534:	2300      	movs	r3, #0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d10b      	bne.n	8000552 <xQueueReceive+0x62>
        __asm volatile
 800053a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800053e:	f383 8811 	msr	BASEPRI, r3
 8000542:	f3bf 8f6f 	isb	sy
 8000546:	f3bf 8f4f 	dsb	sy
 800054a:	61fb      	str	r3, [r7, #28]
    }
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000552:	f001 f867 	bl	8001624 <xTaskGetSchedulerState>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d102      	bne.n	8000562 <xQueueReceive+0x72>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <xQueueReceive+0x76>
 8000562:	2301      	movs	r3, #1
 8000564:	e000      	b.n	8000568 <xQueueReceive+0x78>
 8000566:	2300      	movs	r3, #0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d10b      	bne.n	8000584 <xQueueReceive+0x94>
        __asm volatile
 800056c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000570:	f383 8811 	msr	BASEPRI, r3
 8000574:	f3bf 8f6f 	isb	sy
 8000578:	f3bf 8f4f 	dsb	sy
 800057c:	61bb      	str	r3, [r7, #24]
    }
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000584:	f001 fc9a 	bl	8001ebc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800058a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800058e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000590:	2b00      	cmp	r3, #0
 8000592:	d01f      	beq.n	80005d4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000594:	68b9      	ldr	r1, [r7, #8]
 8000596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000598:	f000 f88c 	bl	80006b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800059c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059e:	1e5a      	subs	r2, r3, #1
 80005a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a6:	691b      	ldr	r3, [r3, #16]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00f      	beq.n	80005cc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ae:	3310      	adds	r3, #16
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fe23 	bl	80011fc <xTaskRemoveFromEventList>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d007      	beq.n	80005cc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005bc:	4b3c      	ldr	r3, [pc, #240]	@ (80006b0 <xQueueReceive+0x1c0>)
 80005be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	f3bf 8f4f 	dsb	sy
 80005c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005cc:	f001 fca8 	bl	8001f20 <vPortExitCritical>
                return pdPASS;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e069      	b.n	80006a8 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d103      	bne.n	80005e2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005da:	f001 fca1 	bl	8001f20 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005de:	2300      	movs	r3, #0
 80005e0:	e062      	b.n	80006a8 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d106      	bne.n	80005f6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fedd 	bl	80013ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80005f6:	f001 fc93 	bl	8001f20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80005fa:	f000 fb05 	bl	8000c08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80005fe:	f001 fc5d 	bl	8001ebc <vPortEnterCritical>
 8000602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000608:	b25b      	sxtb	r3, r3
 800060a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060e:	d103      	bne.n	8000618 <xQueueReceive+0x128>
 8000610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000612:	2200      	movs	r2, #0
 8000614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800061a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800061e:	b25b      	sxtb	r3, r3
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000624:	d103      	bne.n	800062e <xQueueReceive+0x13e>
 8000626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800062e:	f001 fc77 	bl	8001f20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000632:	1d3a      	adds	r2, r7, #4
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fecc 	bl	80013d8 <xTaskCheckForTimeOut>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d123      	bne.n	800068e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000648:	f000 f8ac 	bl	80007a4 <prvIsQueueEmpty>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d017      	beq.n	8000682 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000654:	3324      	adds	r3, #36	@ 0x24
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4611      	mov	r1, r2
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fd62 	bl	8001124 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000662:	f000 f84d 	bl	8000700 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8000666:	f000 fadd 	bl	8000c24 <xTaskResumeAll>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d189      	bne.n	8000584 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <xQueueReceive+0x1c0>)
 8000672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	e780      	b.n	8000584 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000684:	f000 f83c 	bl	8000700 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000688:	f000 facc 	bl	8000c24 <xTaskResumeAll>
 800068c:	e77a      	b.n	8000584 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800068e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000690:	f000 f836 	bl	8000700 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000694:	f000 fac6 	bl	8000c24 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800069a:	f000 f883 	bl	80007a4 <prvIsQueueEmpty>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	f43f af6f 	beq.w	8000584 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006a6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3730      	adds	r7, #48	@ 0x30
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	e000ed04 	.word	0xe000ed04

080006b4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d018      	beq.n	80006f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	68da      	ldr	r2, [r3, #12]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ce:	441a      	add	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d303      	bcc.n	80006e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68d9      	ldr	r1, [r3, #12]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	461a      	mov	r2, r3
 80006f2:	6838      	ldr	r0, [r7, #0]
 80006f4:	f001 ff74 	bl	80025e0 <memcpy>
    }
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000708:	f001 fbd8 	bl	8001ebc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000712:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000714:	e011      	b.n	800073a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800071a:	2b00      	cmp	r3, #0
 800071c:	d012      	beq.n	8000744 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3324      	adds	r3, #36	@ 0x24
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fd6a 	bl	80011fc <xTaskRemoveFromEventList>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800072e:	f000 febb 	bl	80014a8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3b01      	subs	r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	2b00      	cmp	r3, #0
 8000740:	dce9      	bgt.n	8000716 <prvUnlockQueue+0x16>
 8000742:	e000      	b.n	8000746 <prvUnlockQueue+0x46>
                    break;
 8000744:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	22ff      	movs	r2, #255	@ 0xff
 800074a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800074e:	f001 fbe7 	bl	8001f20 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8000752:	f001 fbb3 	bl	8001ebc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800075c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800075e:	e011      	b.n	8000784 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	691b      	ldr	r3, [r3, #16]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d012      	beq.n	800078e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3310      	adds	r3, #16
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fd45 	bl	80011fc <xTaskRemoveFromEventList>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000778:	f000 fe96 	bl	80014a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800077c:	7bbb      	ldrb	r3, [r7, #14]
 800077e:	3b01      	subs	r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dce9      	bgt.n	8000760 <prvUnlockQueue+0x60>
 800078c:	e000      	b.n	8000790 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800078e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	22ff      	movs	r2, #255	@ 0xff
 8000794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000798:	f001 fbc2 	bl	8001f20 <vPortExitCritical>
}
 800079c:	bf00      	nop
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80007ac:	f001 fb86 	bl	8001ebc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e001      	b.n	80007c2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80007c2:	f001 fbad 	bl	8001f20 <vPortExitCritical>

    return xReturn;
 80007c6:	68fb      	ldr	r3, [r7, #12]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80007e0:	f001 fb6c 	bl	8001ebc <vPortEnterCritical>
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f0:	d103      	bne.n	80007fa <vQueueWaitForMessageRestricted+0x2a>
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2200      	movs	r2, #0
 80007f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000800:	b25b      	sxtb	r3, r3
 8000802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000806:	d103      	bne.n	8000810 <vQueueWaitForMessageRestricted+0x40>
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000810:	f001 fb86 	bl	8001f20 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000818:	2b00      	cmp	r3, #0
 800081a:	d106      	bne.n	800082a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	3324      	adds	r3, #36	@ 0x24
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	4618      	mov	r0, r3
 8000826:	f000 fca3 	bl	8001170 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff68 	bl	8000700 <prvUnlockQueue>
    }
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000838:	b580      	push	{r7, lr}
 800083a:	b08c      	sub	sp, #48	@ 0x30
 800083c:	af04      	add	r7, sp, #16
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4613      	mov	r3, r2
 8000846:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fc13 	bl	8002078 <pvPortMalloc>
 8000852:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d013      	beq.n	8000882 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800085a:	2050      	movs	r0, #80	@ 0x50
 800085c:	f001 fc0c 	bl	8002078 <pvPortMalloc>
 8000860:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000868:	2250      	movs	r2, #80	@ 0x50
 800086a:	2100      	movs	r1, #0
 800086c:	69f8      	ldr	r0, [r7, #28]
 800086e:	f001 fe8a 	bl	8002586 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	631a      	str	r2, [r3, #48]	@ 0x30
 8000878:	e005      	b.n	8000886 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f001 fcb8 	bl	80021f0 <vPortFree>
 8000880:	e001      	b.n	8000886 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d013      	beq.n	80008b4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800088c:	88fa      	ldrh	r2, [r7, #6]
 800088e:	2300      	movs	r3, #0
 8000890:	9303      	str	r3, [sp, #12]
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f80e 	bl	80008c4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80008a8:	69f8      	ldr	r0, [r7, #28]
 80008aa:	f000 f893 	bl	80009d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	e002      	b.n	80008ba <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
 80008b8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80008ba:	69bb      	ldr	r3, [r7, #24]
    }
 80008bc:	4618      	mov	r0, r3
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80008d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80008d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80008dc:	3b01      	subs	r3, #1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	f023 0307 	bic.w	r3, r3, #7
 80008ea:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00b      	beq.n	800090e <prvInitialiseNewTask+0x4a>
        __asm volatile
 80008f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fa:	f383 8811 	msr	BASEPRI, r3
 80008fe:	f3bf 8f6f 	isb	sy
 8000902:	f3bf 8f4f 	dsb	sy
 8000906:	617b      	str	r3, [r7, #20]
    }
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d01e      	beq.n	8000952 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
 8000918:	e012      	b.n	8000940 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	4413      	add	r3, r2
 8000920:	7819      	ldrb	r1, [r3, #0]
 8000922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	4413      	add	r3, r2
 8000928:	3334      	adds	r3, #52	@ 0x34
 800092a:	460a      	mov	r2, r1
 800092c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	4413      	add	r3, r2
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d006      	beq.n	8000948 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3301      	adds	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	2b09      	cmp	r3, #9
 8000944:	d9e9      	bls.n	800091a <prvInitialiseNewTask+0x56>
 8000946:	e000      	b.n	800094a <prvInitialiseNewTask+0x86>
            {
                break;
 8000948:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800094a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800094c:	2200      	movs	r2, #0
 800094e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000954:	2b04      	cmp	r3, #4
 8000956:	d90b      	bls.n	8000970 <prvInitialiseNewTask+0xac>
        __asm volatile
 8000958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800095c:	f383 8811 	msr	BASEPRI, r3
 8000960:	f3bf 8f6f 	isb	sy
 8000964:	f3bf 8f4f 	dsb	sy
 8000968:	613b      	str	r3, [r7, #16]
    }
 800096a:	bf00      	nop
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	2b04      	cmp	r3, #4
 8000974:	d901      	bls.n	800097a <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000976:	2304      	movs	r3, #4
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800097a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800097c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800097e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000984:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000988:	3304      	adds	r3, #4
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc40 	bl	8000210 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000992:	3318      	adds	r3, #24
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc3b 	bl	8000210 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800099e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a2:	f1c3 0205 	rsb	r2, r3, #5
 80009a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009a8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80009aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009ae:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	69b8      	ldr	r0, [r7, #24]
 80009b6:	f001 f951 	bl	8001c5c <pxPortInitialiseStack>
 80009ba:	4602      	mov	r2, r0
 80009bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009be:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80009c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80009c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80009dc:	f001 fa6e 	bl	8001ebc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80009e0:	4b3e      	ldr	r3, [pc, #248]	@ (8000adc <prvAddNewTaskToReadyList+0x108>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a3d      	ldr	r2, [pc, #244]	@ (8000adc <prvAddNewTaskToReadyList+0x108>)
 80009e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80009ea:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae0 <prvAddNewTaskToReadyList+0x10c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d109      	bne.n	8000a06 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80009f2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ae0 <prvAddNewTaskToReadyList+0x10c>)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80009f8:	4b38      	ldr	r3, [pc, #224]	@ (8000adc <prvAddNewTaskToReadyList+0x108>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d110      	bne.n	8000a22 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000a00:	f000 fd76 	bl	80014f0 <prvInitialiseTaskLists>
 8000a04:	e00d      	b.n	8000a22 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000a06:	4b37      	ldr	r3, [pc, #220]	@ (8000ae4 <prvAddNewTaskToReadyList+0x110>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d109      	bne.n	8000a22 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <prvAddNewTaskToReadyList+0x10c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d802      	bhi.n	8000a22 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000a1c:	4a30      	ldr	r2, [pc, #192]	@ (8000ae0 <prvAddNewTaskToReadyList+0x10c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000a22:	4b31      	ldr	r3, [pc, #196]	@ (8000ae8 <prvAddNewTaskToReadyList+0x114>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae8 <prvAddNewTaskToReadyList+0x114>)
 8000a2a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a30:	2201      	movs	r2, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <prvAddNewTaskToReadyList+0x118>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000aec <prvAddNewTaskToReadyList+0x118>)
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a42:	492b      	ldr	r1, [pc, #172]	@ (8000af0 <prvAddNewTaskToReadyList+0x11c>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3304      	adds	r3, #4
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	3204      	adds	r2, #4
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	1d1a      	adds	r2, r3, #4
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	4a1b      	ldr	r2, [pc, #108]	@ (8000af0 <prvAddNewTaskToReadyList+0x11c>)
 8000a82:	441a      	add	r2, r3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a8c:	4918      	ldr	r1, [pc, #96]	@ (8000af0 <prvAddNewTaskToReadyList+0x11c>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	440b      	add	r3, r1
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	1c59      	adds	r1, r3, #1
 8000a9c:	4814      	ldr	r0, [pc, #80]	@ (8000af0 <prvAddNewTaskToReadyList+0x11c>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4403      	add	r3, r0
 8000aa8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000aaa:	f001 fa39 	bl	8001f20 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <prvAddNewTaskToReadyList+0x110>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00e      	beq.n	8000ad4 <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <prvAddNewTaskToReadyList+0x10c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d207      	bcs.n	8000ad4 <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <prvAddNewTaskToReadyList+0x120>)
 8000ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	f3bf 8f4f 	dsb	sy
 8000ad0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200000fc 	.word	0x200000fc
 8000ae0:	20000024 	.word	0x20000024
 8000ae4:	20000108 	.word	0x20000108
 8000ae8:	20000118 	.word	0x20000118
 8000aec:	20000104 	.word	0x20000104
 8000af0:	20000028 	.word	0x20000028
 8000af4:	e000ed04 	.word	0xe000ed04

08000af8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d018      	beq.n	8000b3c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <vTaskDelay+0x64>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <vTaskDelay+0x32>
        __asm volatile
 8000b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b16:	f383 8811 	msr	BASEPRI, r3
 8000b1a:	f3bf 8f6f 	isb	sy
 8000b1e:	f3bf 8f4f 	dsb	sy
 8000b22:	60bb      	str	r3, [r7, #8]
    }
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	e7fd      	b.n	8000b26 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8000b2a:	f000 f86d 	bl	8000c08 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b2e:	2100      	movs	r1, #0
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 fd95 	bl	8001660 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000b36:	f000 f875 	bl	8000c24 <xTaskResumeAll>
 8000b3a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d107      	bne.n	8000b52 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <vTaskDelay+0x68>)
 8000b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	f3bf 8f4f 	dsb	sy
 8000b4e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000124 	.word	0x20000124
 8000b60:	e000ed04 	.word	0xe000ed04

08000b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <vTaskStartScheduler+0x88>)
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	2278      	movs	r2, #120	@ 0x78
 8000b76:	491e      	ldr	r1, [pc, #120]	@ (8000bf0 <vTaskStartScheduler+0x8c>)
 8000b78:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <vTaskStartScheduler+0x90>)
 8000b7a:	f7ff fe5d 	bl	8000838 <xTaskCreate>
 8000b7e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d102      	bne.n	8000b8c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000b86:	f000 fdeb 	bl	8001760 <xTimerCreateTimerTask>
 8000b8a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d116      	bne.n	8000bc0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b96:	f383 8811 	msr	BASEPRI, r3
 8000b9a:	f3bf 8f6f 	isb	sy
 8000b9e:	f3bf 8f4f 	dsb	sy
 8000ba2:	60bb      	str	r3, [r7, #8]
    }
 8000ba4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <vTaskStartScheduler+0x94>)
 8000ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <vTaskStartScheduler+0x98>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <vTaskStartScheduler+0x9c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000bba:	f001 f8db 	bl	8001d74 <xPortStartScheduler>
 8000bbe:	e00f      	b.n	8000be0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc6:	d10b      	bne.n	8000be0 <vTaskStartScheduler+0x7c>
        __asm volatile
 8000bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bcc:	f383 8811 	msr	BASEPRI, r3
 8000bd0:	f3bf 8f6f 	isb	sy
 8000bd4:	f3bf 8f4f 	dsb	sy
 8000bd8:	607b      	str	r3, [r7, #4]
    }
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <vTaskStartScheduler+0xa0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000120 	.word	0x20000120
 8000bf0:	08002614 	.word	0x08002614
 8000bf4:	080014c1 	.word	0x080014c1
 8000bf8:	2000011c 	.word	0x2000011c
 8000bfc:	20000108 	.word	0x20000108
 8000c00:	20000100 	.word	0x20000100
 8000c04:	20000000 	.word	0x20000000

08000c08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <vTaskSuspendAll+0x18>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4a03      	ldr	r2, [pc, #12]	@ (8000c20 <vTaskSuspendAll+0x18>)
 8000c14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000124 	.word	0x20000124

08000c24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000c32:	4b71      	ldr	r3, [pc, #452]	@ (8000df8 <xTaskResumeAll+0x1d4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d10b      	bne.n	8000c52 <xTaskResumeAll+0x2e>
        __asm volatile
 8000c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c3e:	f383 8811 	msr	BASEPRI, r3
 8000c42:	f3bf 8f6f 	isb	sy
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	607b      	str	r3, [r7, #4]
    }
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000c52:	f001 f933 	bl	8001ebc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000c56:	4b68      	ldr	r3, [pc, #416]	@ (8000df8 <xTaskResumeAll+0x1d4>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a66      	ldr	r2, [pc, #408]	@ (8000df8 <xTaskResumeAll+0x1d4>)
 8000c5e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c60:	4b65      	ldr	r3, [pc, #404]	@ (8000df8 <xTaskResumeAll+0x1d4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f040 80c0 	bne.w	8000dea <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c6a:	4b64      	ldr	r3, [pc, #400]	@ (8000dfc <xTaskResumeAll+0x1d8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80bb 	beq.w	8000dea <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c74:	e08a      	b.n	8000d8c <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000c76:	4b62      	ldr	r3, [pc, #392]	@ (8000e00 <xTaskResumeAll+0x1dc>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	69fa      	ldr	r2, [r7, #28]
 8000c8a:	6a12      	ldr	r2, [r2, #32]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	69d2      	ldr	r2, [r2, #28]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	3318      	adds	r3, #24
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d103      	bne.n	8000cac <xTaskResumeAll+0x88>
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	6a1a      	ldr	r2, [r3, #32]
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	1e5a      	subs	r2, r3, #1
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	68d2      	ldr	r2, [r2, #12]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	6892      	ldr	r2, [r2, #8]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d103      	bne.n	8000cea <xTaskResumeAll+0xc6>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cfe:	2201      	movs	r2, #1
 8000d00:	409a      	lsls	r2, r3
 8000d02:	4b40      	ldr	r3, [pc, #256]	@ (8000e04 <xTaskResumeAll+0x1e0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	4a3e      	ldr	r2, [pc, #248]	@ (8000e04 <xTaskResumeAll+0x1e0>)
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d10:	493d      	ldr	r1, [pc, #244]	@ (8000e08 <xTaskResumeAll+0x1e4>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	3204      	adds	r2, #4
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	1d1a      	adds	r2, r3, #4
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e08 <xTaskResumeAll+0x1e4>)
 8000d50:	441a      	add	r2, r3
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d5a:	492b      	ldr	r1, [pc, #172]	@ (8000e08 <xTaskResumeAll+0x1e4>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	1c59      	adds	r1, r3, #1
 8000d6a:	4827      	ldr	r0, [pc, #156]	@ (8000e08 <xTaskResumeAll+0x1e4>)
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4403      	add	r3, r0
 8000d76:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d7c:	4b23      	ldr	r3, [pc, #140]	@ (8000e0c <xTaskResumeAll+0x1e8>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d302      	bcc.n	8000d8c <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8000d86:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <xTaskResumeAll+0x1ec>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <xTaskResumeAll+0x1dc>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f47f af70 	bne.w	8000c76 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000d9c:	f000 fc26 	bl	80015ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <xTaskResumeAll+0x1f0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d010      	beq.n	8000dce <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000dac:	f000 f846 	bl	8000e3c <xTaskIncrementTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <xTaskResumeAll+0x1ec>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f1      	bne.n	8000dac <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <xTaskResumeAll+0x1f0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <xTaskResumeAll+0x1ec>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d009      	beq.n	8000dea <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <xTaskResumeAll+0x1f4>)
 8000ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	f3bf 8f4f 	dsb	sy
 8000de6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000dea:	f001 f899 	bl	8001f20 <vPortExitCritical>

    return xAlreadyYielded;
 8000dee:	69bb      	ldr	r3, [r7, #24]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000124 	.word	0x20000124
 8000dfc:	200000fc 	.word	0x200000fc
 8000e00:	200000bc 	.word	0x200000bc
 8000e04:	20000104 	.word	0x20000104
 8000e08:	20000028 	.word	0x20000028
 8000e0c:	20000024 	.word	0x20000024
 8000e10:	20000110 	.word	0x20000110
 8000e14:	2000010c 	.word	0x2000010c
 8000e18:	e000ed04 	.word	0xe000ed04

08000e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000e22:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <xTaskGetTickCount+0x1c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000100 	.word	0x20000100

08000e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e46:	4b7e      	ldr	r3, [pc, #504]	@ (8001040 <xTaskIncrementTick+0x204>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 80ed 	bne.w	800102a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000e50:	4b7c      	ldr	r3, [pc, #496]	@ (8001044 <xTaskIncrementTick+0x208>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000e58:	4a7a      	ldr	r2, [pc, #488]	@ (8001044 <xTaskIncrementTick+0x208>)
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d121      	bne.n	8000ea8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000e64:	4b78      	ldr	r3, [pc, #480]	@ (8001048 <xTaskIncrementTick+0x20c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00b      	beq.n	8000e86 <xTaskIncrementTick+0x4a>
        __asm volatile
 8000e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e72:	f383 8811 	msr	BASEPRI, r3
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	607b      	str	r3, [r7, #4]
    }
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <xTaskIncrementTick+0x46>
 8000e86:	4b70      	ldr	r3, [pc, #448]	@ (8001048 <xTaskIncrementTick+0x20c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800104c <xTaskIncrementTick+0x210>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a6d      	ldr	r2, [pc, #436]	@ (8001048 <xTaskIncrementTick+0x20c>)
 8000e92:	6013      	str	r3, [r2, #0]
 8000e94:	4a6d      	ldr	r2, [pc, #436]	@ (800104c <xTaskIncrementTick+0x210>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001050 <xTaskIncrementTick+0x214>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a6b      	ldr	r2, [pc, #428]	@ (8001050 <xTaskIncrementTick+0x214>)
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	f000 fba2 	bl	80015ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8001054 <xTaskIncrementTick+0x218>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a3a      	ldr	r2, [r7, #32]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f0c0 80a6 	bcc.w	8001000 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000eb4:	4b64      	ldr	r3, [pc, #400]	@ (8001048 <xTaskIncrementTick+0x20c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ebe:	4b65      	ldr	r3, [pc, #404]	@ (8001054 <xTaskIncrementTick+0x218>)
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	601a      	str	r2, [r3, #0]
                    break;
 8000ec6:	e09b      	b.n	8001000 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8001048 <xTaskIncrementTick+0x20c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000ed8:	6a3a      	ldr	r2, [r7, #32]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d203      	bcs.n	8000ee8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000ee0:	4a5c      	ldr	r2, [pc, #368]	@ (8001054 <xTaskIncrementTick+0x218>)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000ee6:	e08b      	b.n	8001000 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	68d2      	ldr	r2, [r2, #12]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	6892      	ldr	r2, [r2, #8]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d103      	bne.n	8000f16 <xTaskIncrementTick+0xda>
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	68da      	ldr	r2, [r3, #12]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d01e      	beq.n	8000f6c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	6a12      	ldr	r2, [r2, #32]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	69d2      	ldr	r2, [r2, #28]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	3318      	adds	r3, #24
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d103      	bne.n	8000f5c <xTaskIncrementTick+0x120>
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	6a1a      	ldr	r2, [r3, #32]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f70:	2201      	movs	r2, #1
 8000f72:	409a      	lsls	r2, r3
 8000f74:	4b38      	ldr	r3, [pc, #224]	@ (8001058 <xTaskIncrementTick+0x21c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	4a37      	ldr	r2, [pc, #220]	@ (8001058 <xTaskIncrementTick+0x21c>)
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f82:	4936      	ldr	r1, [pc, #216]	@ (800105c <xTaskIncrementTick+0x220>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	4413      	add	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3304      	adds	r3, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	3204      	adds	r2, #4
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	1d1a      	adds	r2, r3, #4
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	4a26      	ldr	r2, [pc, #152]	@ (800105c <xTaskIncrementTick+0x220>)
 8000fc2:	441a      	add	r2, r3
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fcc:	4923      	ldr	r1, [pc, #140]	@ (800105c <xTaskIncrementTick+0x220>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	4413      	add	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	1c59      	adds	r1, r3, #1
 8000fdc:	481f      	ldr	r0, [pc, #124]	@ (800105c <xTaskIncrementTick+0x220>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4403      	add	r3, r0
 8000fe8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fee:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <xTaskIncrementTick+0x224>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	f67f af5d 	bls.w	8000eb4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ffe:	e759      	b.n	8000eb4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <xTaskIncrementTick+0x224>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001006:	4915      	ldr	r1, [pc, #84]	@ (800105c <xTaskIncrementTick+0x220>)
 8001008:	4613      	mov	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d901      	bls.n	800101c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001018:	2301      	movs	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <xTaskIncrementTick+0x228>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001024:	2301      	movs	r3, #1
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
 8001028:	e004      	b.n	8001034 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <xTaskIncrementTick+0x22c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <xTaskIncrementTick+0x22c>)
 8001032:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001036:	4618      	mov	r0, r3
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000124 	.word	0x20000124
 8001044:	20000100 	.word	0x20000100
 8001048:	200000b4 	.word	0x200000b4
 800104c:	200000b8 	.word	0x200000b8
 8001050:	20000114 	.word	0x20000114
 8001054:	2000011c 	.word	0x2000011c
 8001058:	20000104 	.word	0x20000104
 800105c:	20000028 	.word	0x20000028
 8001060:	20000024 	.word	0x20000024
 8001064:	20000110 	.word	0x20000110
 8001068:	2000010c 	.word	0x2000010c

0800106c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001072:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <vTaskSwitchContext+0xa4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800107a:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <vTaskSwitchContext+0xa8>)
 800107c:	2201      	movs	r2, #1
 800107e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001080:	e040      	b.n	8001104 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8001082:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <vTaskSwitchContext+0xa8>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001088:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <vTaskSwitchContext+0xac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001096:	7afb      	ldrb	r3, [r7, #11]
 8001098:	f1c3 031f 	rsb	r3, r3, #31
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	491f      	ldr	r1, [pc, #124]	@ (800111c <vTaskSwitchContext+0xb0>)
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10b      	bne.n	80010ca <vTaskSwitchContext+0x5e>
        __asm volatile
 80010b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010b6:	f383 8811 	msr	BASEPRI, r3
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f3bf 8f4f 	dsb	sy
 80010c2:	607b      	str	r3, [r7, #4]
    }
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	e7fd      	b.n	80010c6 <vTaskSwitchContext+0x5a>
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4a11      	ldr	r2, [pc, #68]	@ (800111c <vTaskSwitchContext+0xb0>)
 80010d6:	4413      	add	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	3308      	adds	r3, #8
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d104      	bne.n	80010fa <vTaskSwitchContext+0x8e>
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a07      	ldr	r2, [pc, #28]	@ (8001120 <vTaskSwitchContext+0xb4>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	20000124 	.word	0x20000124
 8001114:	20000110 	.word	0x20000110
 8001118:	20000104 	.word	0x20000104
 800111c:	20000028 	.word	0x20000028
 8001120:	20000024 	.word	0x20000024

08001124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10b      	bne.n	800114c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8001134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	60fb      	str	r3, [r7, #12]
    }
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800114c:	4b07      	ldr	r3, [pc, #28]	@ (800116c <vTaskPlaceOnEventList+0x48>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3318      	adds	r3, #24
 8001152:	4619      	mov	r1, r3
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff f868 	bl	800022a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800115a:	2101      	movs	r1, #1
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f000 fa7f 	bl	8001660 <prvAddCurrentTaskToDelayedList>
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000024 	.word	0x20000024

08001170 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10b      	bne.n	800119a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8001182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001186:	f383 8811 	msr	BASEPRI, r3
 800118a:	f3bf 8f6f 	isb	sy
 800118e:	f3bf 8f4f 	dsb	sy
 8001192:	613b      	str	r3, [r7, #16]
    }
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	e7fd      	b.n	8001196 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <vTaskPlaceOnEventListRestricted+0x88>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	61da      	str	r2, [r3, #28]
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <vTaskPlaceOnEventListRestricted+0x88>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	6892      	ldr	r2, [r2, #8]
 80011b0:	621a      	str	r2, [r3, #32]
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <vTaskPlaceOnEventListRestricted+0x88>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	3218      	adds	r2, #24
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <vTaskPlaceOnEventListRestricted+0x88>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f103 0218 	add.w	r2, r3, #24
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <vTaskPlaceOnEventListRestricted+0x88>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	68b8      	ldr	r0, [r7, #8]
 80011ec:	f000 fa38 	bl	8001660 <prvAddCurrentTaskToDelayedList>
    }
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000024 	.word	0x20000024

080011fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80011fc:	b480      	push	{r7}
 80011fe:	b08b      	sub	sp, #44	@ 0x2c
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10b      	bne.n	800122a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8001212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
 8001222:	60fb      	str	r3, [r7, #12]
    }
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	e7fd      	b.n	8001226 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	6a3a      	ldr	r2, [r7, #32]
 8001236:	6a12      	ldr	r2, [r2, #32]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	6a3a      	ldr	r2, [r7, #32]
 8001240:	69d2      	ldr	r2, [r2, #28]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	3318      	adds	r3, #24
 800124c:	429a      	cmp	r2, r3
 800124e:	d103      	bne.n	8001258 <xTaskRemoveFromEventList+0x5c>
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	2200      	movs	r2, #0
 800125c:	629a      	str	r2, [r3, #40]	@ 0x28
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	1e5a      	subs	r2, r3, #1
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001268:	4b4a      	ldr	r3, [pc, #296]	@ (8001394 <xTaskRemoveFromEventList+0x198>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d15e      	bne.n	800132e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	6a3a      	ldr	r2, [r7, #32]
 800127c:	68d2      	ldr	r2, [r2, #12]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	6a3a      	ldr	r2, [r7, #32]
 8001286:	6892      	ldr	r2, [r2, #8]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	3304      	adds	r3, #4
 8001292:	429a      	cmp	r2, r3
 8001294:	d103      	bne.n	800129e <xTaskRemoveFromEventList+0xa2>
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b2:	2201      	movs	r2, #1
 80012b4:	409a      	lsls	r2, r3
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <xTaskRemoveFromEventList+0x19c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	4a36      	ldr	r2, [pc, #216]	@ (8001398 <xTaskRemoveFromEventList+0x19c>)
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c4:	4935      	ldr	r1, [pc, #212]	@ (800139c <xTaskRemoveFromEventList+0x1a0>)
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	440b      	add	r3, r1
 80012d0:	3304      	adds	r3, #4
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	6a3b      	ldr	r3, [r7, #32]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	6a3a      	ldr	r2, [r7, #32]
 80012ea:	3204      	adds	r2, #4
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	1d1a      	adds	r2, r3, #4
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4a26      	ldr	r2, [pc, #152]	@ (800139c <xTaskRemoveFromEventList+0x1a0>)
 8001304:	441a      	add	r2, r3
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800130e:	4923      	ldr	r1, [pc, #140]	@ (800139c <xTaskRemoveFromEventList+0x1a0>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c59      	adds	r1, r3, #1
 800131e:	481f      	ldr	r0, [pc, #124]	@ (800139c <xTaskRemoveFromEventList+0x1a0>)
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4403      	add	r3, r0
 800132a:	6019      	str	r1, [r3, #0]
 800132c:	e01b      	b.n	8001366 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800132e:	4b1c      	ldr	r3, [pc, #112]	@ (80013a0 <xTaskRemoveFromEventList+0x1a4>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	61da      	str	r2, [r3, #28]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	3218      	adds	r2, #24
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	f103 0218 	add.w	r2, r3, #24
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	6a3b      	ldr	r3, [r7, #32]
 8001358:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <xTaskRemoveFromEventList+0x1a4>)
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <xTaskRemoveFromEventList+0x1a4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <xTaskRemoveFromEventList+0x1a4>)
 8001364:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <xTaskRemoveFromEventList+0x1a8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001370:	429a      	cmp	r2, r3
 8001372:	d905      	bls.n	8001380 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8001374:	2301      	movs	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <xTaskRemoveFromEventList+0x1ac>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e001      	b.n	8001384 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001386:	4618      	mov	r0, r3
 8001388:	372c      	adds	r7, #44	@ 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000124 	.word	0x20000124
 8001398:	20000104 	.word	0x20000104
 800139c:	20000028 	.word	0x20000028
 80013a0:	200000bc 	.word	0x200000bc
 80013a4:	20000024 	.word	0x20000024
 80013a8:	20000110 	.word	0x20000110

080013ac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <vTaskInternalSetTimeOutState+0x24>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <vTaskInternalSetTimeOutState+0x28>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20000114 	.word	0x20000114
 80013d4:	20000100 	.word	0x20000100

080013d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10b      	bne.n	8001400 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80013e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	613b      	str	r3, [r7, #16]
    }
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10b      	bne.n	800141e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8001406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800140a:	f383 8811 	msr	BASEPRI, r3
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f3bf 8f4f 	dsb	sy
 8001416:	60fb      	str	r3, [r7, #12]
    }
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	e7fd      	b.n	800141a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800141e:	f000 fd4d 	bl	8001ebc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001422:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <xTaskCheckForTimeOut+0xc8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800143a:	d102      	bne.n	8001442 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	e026      	b.n	8001490 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <xTaskCheckForTimeOut+0xcc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d00a      	beq.n	8001464 <xTaskCheckForTimeOut+0x8c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	429a      	cmp	r2, r3
 8001456:	d305      	bcc.n	8001464 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001458:	2301      	movs	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e015      	b.n	8001490 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	d20b      	bcs.n	8001486 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	1ad2      	subs	r2, r2, r3
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff96 	bl	80013ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
 8001484:	e004      	b.n	8001490 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001490:	f000 fd46 	bl	8001f20 <vPortExitCritical>

    return xReturn;
 8001494:	69fb      	ldr	r3, [r7, #28]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000100 	.word	0x20000100
 80014a4:	20000114 	.word	0x20000114

080014a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <vTaskMissedYield+0x14>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000110 	.word	0x20000110

080014c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80014c8:	f000 f852 	bl	8001570 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <prvIdleTask+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d9f9      	bls.n	80014c8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <prvIdleTask+0x2c>)
 80014d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80014e4:	e7f0      	b.n	80014c8 <prvIdleTask+0x8>
 80014e6:	bf00      	nop
 80014e8:	20000028 	.word	0x20000028
 80014ec:	e000ed04 	.word	0xe000ed04

080014f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	e00c      	b.n	8001516 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <prvInitialiseTaskLists+0x60>)
 8001508:	4413      	add	r3, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fe60 	bl	80001d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3301      	adds	r3, #1
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d9ef      	bls.n	80014fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800151c:	480d      	ldr	r0, [pc, #52]	@ (8001554 <prvInitialiseTaskLists+0x64>)
 800151e:	f7fe fe57 	bl	80001d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <prvInitialiseTaskLists+0x68>)
 8001524:	f7fe fe54 	bl	80001d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <prvInitialiseTaskLists+0x6c>)
 800152a:	f7fe fe51 	bl	80001d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800152e:	480c      	ldr	r0, [pc, #48]	@ (8001560 <prvInitialiseTaskLists+0x70>)
 8001530:	f7fe fe4e 	bl	80001d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <prvInitialiseTaskLists+0x74>)
 8001536:	f7fe fe4b 	bl	80001d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <prvInitialiseTaskLists+0x78>)
 800153c:	4a05      	ldr	r2, [pc, #20]	@ (8001554 <prvInitialiseTaskLists+0x64>)
 800153e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <prvInitialiseTaskLists+0x7c>)
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <prvInitialiseTaskLists+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000028 	.word	0x20000028
 8001554:	2000008c 	.word	0x2000008c
 8001558:	200000a0 	.word	0x200000a0
 800155c:	200000bc 	.word	0x200000bc
 8001560:	200000d0 	.word	0x200000d0
 8001564:	200000e8 	.word	0x200000e8
 8001568:	200000b4 	.word	0x200000b4
 800156c:	200000b8 	.word	0x200000b8

08001570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001576:	e019      	b.n	80015ac <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8001578:	f000 fca0 	bl	8001ebc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800157c:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <prvCheckTasksWaitingTermination+0x50>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3304      	adds	r3, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe87 	bl	800029c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <prvCheckTasksWaitingTermination+0x54>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	3b01      	subs	r3, #1
 8001594:	4a0b      	ldr	r2, [pc, #44]	@ (80015c4 <prvCheckTasksWaitingTermination+0x54>)
 8001596:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <prvCheckTasksWaitingTermination+0x58>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <prvCheckTasksWaitingTermination+0x58>)
 80015a0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80015a2:	f000 fcbd 	bl	8001f20 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f810 	bl	80015cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <prvCheckTasksWaitingTermination+0x58>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e1      	bne.n	8001578 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000d0 	.word	0x200000d0
 80015c4:	200000fc 	.word	0x200000fc
 80015c8:	200000e4 	.word	0x200000e4

080015cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fe09 	bl	80021f0 <vPortFree>
            vPortFree( pxTCB );
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fe06 	bl	80021f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015f0:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <prvResetNextTaskUnblockTime+0x30>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d104      	bne.n	8001604 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <prvResetNextTaskUnblockTime+0x34>)
 80015fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001600:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001602:	e005      	b.n	8001610 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <prvResetNextTaskUnblockTime+0x30>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <prvResetNextTaskUnblockTime+0x34>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200000b4 	.word	0x200000b4
 8001620:	2000011c 	.word	0x2000011c

08001624 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800162a:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <xTaskGetSchedulerState+0x34>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001632:	2301      	movs	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e008      	b.n	800164a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001638:	4b08      	ldr	r3, [pc, #32]	@ (800165c <xTaskGetSchedulerState+0x38>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	e001      	b.n	800164a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800164a:	687b      	ldr	r3, [r7, #4]
    }
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000108 	.word	0x20000108
 800165c:	20000124 	.word	0x20000124

08001660 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800166a:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <prvAddCurrentTaskToDelayedList+0xe4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3304      	adds	r3, #4
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fe10 	bl	800029c <uxListRemove>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10b      	bne.n	800169a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	2201      	movs	r2, #1
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	4b2e      	ldr	r3, [pc, #184]	@ (800174c <prvAddCurrentTaskToDelayedList+0xec>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4013      	ands	r3, r2
 8001696:	4a2d      	ldr	r2, [pc, #180]	@ (800174c <prvAddCurrentTaskToDelayedList+0xec>)
 8001698:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d124      	bne.n	80016ec <prvAddCurrentTaskToDelayedList+0x8c>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d021      	beq.n	80016ec <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80016a8:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b26      	ldr	r3, [pc, #152]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	4b24      	ldr	r3, [pc, #144]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	6892      	ldr	r2, [r2, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	4b21      	ldr	r3, [pc, #132]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	3204      	adds	r2, #4
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1d1a      	adds	r2, r3, #4
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a1d      	ldr	r2, [pc, #116]	@ (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016dc:	615a      	str	r2, [r3, #20]
 80016de:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001750 <prvAddCurrentTaskToDelayedList+0xf0>)
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80016ea:	e026      	b.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	d209      	bcs.n	8001718 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001704:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3304      	adds	r3, #4
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f7fe fd8a 	bl	800022a <vListInsert>
}
 8001716:	e010      	b.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <prvAddCurrentTaskToDelayedList+0xf8>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <prvAddCurrentTaskToDelayedList+0xe8>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7fe fd80 	bl	800022a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <prvAddCurrentTaskToDelayedList+0xfc>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	429a      	cmp	r2, r3
 8001732:	d202      	bcs.n	800173a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001734:	4a09      	ldr	r2, [pc, #36]	@ (800175c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000100 	.word	0x20000100
 8001748:	20000024 	.word	0x20000024
 800174c:	20000104 	.word	0x20000104
 8001750:	200000e8 	.word	0x200000e8
 8001754:	200000b8 	.word	0x200000b8
 8001758:	200000b4 	.word	0x200000b4
 800175c:	2000011c 	.word	0x2000011c

08001760 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800176a:	f000 fa4d 	bl	8001c08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <xTimerCreateTimerTask+0x54>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00a      	beq.n	800178c <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <xTimerCreateTimerTask+0x58>)
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	2303      	movs	r3, #3
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2300      	movs	r3, #0
 8001780:	2278      	movs	r2, #120	@ 0x78
 8001782:	490e      	ldr	r1, [pc, #56]	@ (80017bc <xTimerCreateTimerTask+0x5c>)
 8001784:	480e      	ldr	r0, [pc, #56]	@ (80017c0 <xTimerCreateTimerTask+0x60>)
 8001786:	f7ff f857 	bl	8000838 <xTaskCreate>
 800178a:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10b      	bne.n	80017aa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001796:	f383 8811 	msr	BASEPRI, r3
 800179a:	f3bf 8f6f 	isb	sy
 800179e:	f3bf 8f4f 	dsb	sy
 80017a2:	603b      	str	r3, [r7, #0]
    }
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	e7fd      	b.n	80017a6 <xTimerCreateTimerTask+0x46>
        return xReturn;
 80017aa:	687b      	ldr	r3, [r7, #4]
    }
 80017ac:	4618      	mov	r0, r3
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000158 	.word	0x20000158
 80017b8:	2000015c 	.word	0x2000015c
 80017bc:	0800261c 	.word	0x0800261c
 80017c0:	08001869 	.word	0x08001869

080017c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80017d0:	e008      	b.n	80017e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4413      	add	r3, r2
 80017da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	699a      	ldr	r2, [r3, #24]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	18d1      	adds	r1, r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 f8df 	bl	80019b4 <prvInsertTimerInActiveList>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1ea      	bne.n	80017d2 <prvReloadTimer+0xe>
        }
    }
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <prvProcessExpiredTimer+0x5c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3304      	adds	r3, #4
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fd3b 	bl	800029c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f7ff ffc3 	bl	80017c4 <prvReloadTimer>
 800183e:	e008      	b.n	8001852 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001846:	f023 0301 	bic.w	r3, r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	4798      	blx	r3
    }
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000150 	.word	0x20000150

08001868 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f859 	bl	800192c <prvGetNextExpireTime>
 800187a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4619      	mov	r1, r3
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f805 	bl	8001890 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001886:	f000 f8d7 	bl	8001a38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800188a:	bf00      	nop
 800188c:	e7f0      	b.n	8001870 <prvTimerTask+0x8>
	...

08001890 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800189a:	f7ff f9b5 	bl	8000c08 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800189e:	f107 0308 	add.w	r3, r7, #8
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f866 	bl	8001974 <prvSampleTimeNow>
 80018a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d130      	bne.n	8001912 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <prvProcessTimerOrBlockTask+0x3c>
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d806      	bhi.n	80018cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80018be:	f7ff f9b1 	bl	8000c24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80018c2:	68f9      	ldr	r1, [r7, #12]
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff ff9f 	bl	8001808 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80018ca:	e024      	b.n	8001916 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <prvProcessTimerOrBlockTask+0x90>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <prvProcessTimerOrBlockTask+0x50>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <prvProcessTimerOrBlockTask+0x52>
 80018e0:	2300      	movs	r3, #0
 80018e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80018e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <prvProcessTimerOrBlockTask+0x94>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7fe ff6d 	bl	80007d0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80018f6:	f7ff f995 	bl	8000c24 <xTaskResumeAll>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10a      	bne.n	8001916 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <prvProcessTimerOrBlockTask+0x98>)
 8001902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	f3bf 8f4f 	dsb	sy
 800190c:	f3bf 8f6f 	isb	sy
    }
 8001910:	e001      	b.n	8001916 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001912:	f7ff f987 	bl	8000c24 <xTaskResumeAll>
    }
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000154 	.word	0x20000154
 8001924:	20000158 	.word	0x20000158
 8001928:	e000ed04 	.word	0xe000ed04

0800192c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001934:	4b0e      	ldr	r3, [pc, #56]	@ (8001970 <prvGetNextExpireTime+0x44>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <prvGetNextExpireTime+0x16>
 800193e:	2201      	movs	r2, #1
 8001940:	e000      	b.n	8001944 <prvGetNextExpireTime+0x18>
 8001942:	2200      	movs	r2, #0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001950:	4b07      	ldr	r3, [pc, #28]	@ (8001970 <prvGetNextExpireTime+0x44>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e001      	b.n	8001960 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001960:	68fb      	ldr	r3, [r7, #12]
    }
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000150 	.word	0x20000150

08001974 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800197c:	f7ff fa4e 	bl	8000e1c <xTaskGetTickCount>
 8001980:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001982:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <prvSampleTimeNow+0x3c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d205      	bcs.n	8001998 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800198c:	f000 f916 	bl	8001bbc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e002      	b.n	800199e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800199e:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <prvSampleTimeNow+0x3c>)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80019a4:	68fb      	ldr	r3, [r7, #12]
    }
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000160 	.word	0x20000160

080019b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d812      	bhi.n	8001a00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	1ad2      	subs	r2, r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d302      	bcc.n	80019ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e01b      	b.n	8001a26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <prvInsertTimerInActiveList+0x7c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3304      	adds	r3, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4610      	mov	r0, r2
 80019fa:	f7fe fc16 	bl	800022a <vListInsert>
 80019fe:	e012      	b.n	8001a26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d206      	bcs.n	8001a16 <prvInsertTimerInActiveList+0x62>
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d302      	bcc.n	8001a16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e007      	b.n	8001a26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <prvInsertTimerInActiveList+0x80>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4610      	mov	r0, r2
 8001a22:	f7fe fc02 	bl	800022a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001a26:	697b      	ldr	r3, [r7, #20]
    }
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000154 	.word	0x20000154
 8001a34:	20000150 	.word	0x20000150

08001a38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001a3e:	e0a9      	b.n	8001b94 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f2c0 80a6 	blt.w	8001b94 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fc1f 	bl	800029c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff87 	bl	8001974 <prvSampleTimeNow>
 8001a66:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	f200 808e 	bhi.w	8001b8e <prvProcessReceivedCommands+0x156>
 8001a72:	a201      	add	r2, pc, #4	@ (adr r2, 8001a78 <prvProcessReceivedCommands+0x40>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a9d 	.word	0x08001a9d
 8001a7c:	08001a9d 	.word	0x08001a9d
 8001a80:	08001b05 	.word	0x08001b05
 8001a84:	08001b19 	.word	0x08001b19
 8001a88:	08001b65 	.word	0x08001b65
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001a9d 	.word	0x08001a9d
 8001a94:	08001b05 	.word	0x08001b05
 8001a98:	08001b19 	.word	0x08001b19
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	18d1      	adds	r1, r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	69f8      	ldr	r0, [r7, #28]
 8001abc:	f7ff ff7a 	bl	80019b4 <prvInsertTimerInActiveList>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d065      	beq.n	8001b92 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	4413      	add	r3, r2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	69f8      	ldr	r0, [r7, #28]
 8001ae2:	f7ff fe6f 	bl	80017c4 <prvReloadTimer>
 8001ae6:	e008      	b.n	8001afa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	69f8      	ldr	r0, [r7, #28]
 8001b00:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001b02:	e046      	b.n	8001b92 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8001b16:	e03d      	b.n	8001b94 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10b      	bne.n	8001b50 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8001b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	617b      	str	r3, [r7, #20]
    }
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	18d1      	adds	r1, r2, r3
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	69f8      	ldr	r0, [r7, #28]
 8001b5e:	f7ff ff29 	bl	80019b4 <prvInsertTimerInActiveList>
                        break;
 8001b62:	e017      	b.n	8001b94 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8001b72:	69f8      	ldr	r0, [r7, #28]
 8001b74:	f000 fb3c 	bl	80021f0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001b78:	e00c      	b.n	8001b94 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                        break;
 8001b8c:	e002      	b.n	8001b94 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <prvProcessReceivedCommands+0x15c>
                        break;
 8001b92:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001b94:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <prvProcessReceivedCommands+0x180>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f107 0108 	add.w	r1, r7, #8
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fca6 	bl	80004f0 <xQueueReceive>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f47f af4a 	bne.w	8001a40 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000158 	.word	0x20000158

08001bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001bc2:	e009      	b.n	8001bd8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <prvSwitchTimerLists+0x44>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001bce:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f7ff fe18 	bl	8001808 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <prvSwitchTimerLists+0x44>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001be2:	4b07      	ldr	r3, [pc, #28]	@ (8001c00 <prvSwitchTimerLists+0x44>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <prvSwitchTimerLists+0x48>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a04      	ldr	r2, [pc, #16]	@ (8001c00 <prvSwitchTimerLists+0x44>)
 8001bee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001bf0:	4a04      	ldr	r2, [pc, #16]	@ (8001c04 <prvSwitchTimerLists+0x48>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
    }
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000150 	.word	0x20000150
 8001c04:	20000154 	.word	0x20000154

08001c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001c0c:	f000 f956 	bl	8001ebc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001c10:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <prvCheckForValidListAndQueue+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d113      	bne.n	8001c40 <prvCheckForValidListAndQueue+0x38>
            {
                vListInitialise( &xActiveTimerList1 );
 8001c18:	480c      	ldr	r0, [pc, #48]	@ (8001c4c <prvCheckForValidListAndQueue+0x44>)
 8001c1a:	f7fe fad9 	bl	80001d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001c1e:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <prvCheckForValidListAndQueue+0x48>)
 8001c20:	f7fe fad6 	bl	80001d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <prvCheckForValidListAndQueue+0x4c>)
 8001c26:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <prvCheckForValidListAndQueue+0x44>)
 8001c28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <prvCheckForValidListAndQueue+0x50>)
 8001c2c:	4a08      	ldr	r2, [pc, #32]	@ (8001c50 <prvCheckForValidListAndQueue+0x48>)
 8001c2e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001c30:	2200      	movs	r2, #0
 8001c32:	210c      	movs	r1, #12
 8001c34:	2005      	movs	r0, #5
 8001c36:	f7fe fbed 	bl	8000414 <xQueueGenericCreate>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a02      	ldr	r2, [pc, #8]	@ (8001c48 <prvCheckForValidListAndQueue+0x40>)
 8001c3e:	6013      	str	r3, [r2, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001c40:	f000 f96e 	bl	8001f20 <vPortExitCritical>
    }
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000158 	.word	0x20000158
 8001c4c:	20000128 	.word	0x20000128
 8001c50:	2000013c 	.word	0x2000013c
 8001c54:	20000150 	.word	0x20000150
 8001c58:	20000154 	.word	0x20000154

08001c5c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	3b04      	subs	r3, #4
 8001c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f023 0201 	bic.w	r2, r3, #1
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	3b04      	subs	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc0 <pxPortInitialiseStack+0x64>)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3b14      	subs	r3, #20
 8001c96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3b04      	subs	r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f06f 0202 	mvn.w	r2, #2
 8001caa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3b20      	subs	r3, #32
 8001cb0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	08001cc5 	.word	0x08001cc5

08001cc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <prvTaskExitError+0x58>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d00b      	beq.n	8001cf0 <prvTaskExitError+0x2c>
        __asm volatile
 8001cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cdc:	f383 8811 	msr	BASEPRI, r3
 8001ce0:	f3bf 8f6f 	isb	sy
 8001ce4:	f3bf 8f4f 	dsb	sy
 8001ce8:	60fb      	str	r3, [r7, #12]
    }
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <prvTaskExitError+0x28>
        __asm volatile
 8001cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	60bb      	str	r3, [r7, #8]
    }
 8001d02:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001d04:	bf00      	nop
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0fc      	beq.n	8001d06 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000004 	.word	0x20000004

08001d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001d20:	4b07      	ldr	r3, [pc, #28]	@ (8001d40 <pxCurrentTCBConst2>)
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	6808      	ldr	r0, [r1, #0]
 8001d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d2a:	f380 8809 	msr	PSP, r0
 8001d2e:	f3bf 8f6f 	isb	sy
 8001d32:	f04f 0000 	mov.w	r0, #0
 8001d36:	f380 8811 	msr	BASEPRI, r0
 8001d3a:	4770      	bx	lr
 8001d3c:	f3af 8000 	nop.w

08001d40 <pxCurrentTCBConst2>:
 8001d40:	20000024 	.word	0x20000024
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop

08001d48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001d48:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <prvPortStartFirstTask+0x24>)
 8001d4a:	6800      	ldr	r0, [r0, #0]
 8001d4c:	6800      	ldr	r0, [r0, #0]
 8001d4e:	f380 8808 	msr	MSP, r0
 8001d52:	f04f 0000 	mov.w	r0, #0
 8001d56:	f380 8814 	msr	CONTROL, r0
 8001d5a:	b662      	cpsie	i
 8001d5c:	b661      	cpsie	f
 8001d5e:	f3bf 8f4f 	dsb	sy
 8001d62:	f3bf 8f6f 	isb	sy
 8001d66:	df00      	svc	0
 8001d68:	bf00      	nop
 8001d6a:	0000      	.short	0x0000
 8001d6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop

08001d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001d7a:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <xPortStartScheduler+0x124>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a47      	ldr	r2, [pc, #284]	@ (8001e9c <xPortStartScheduler+0x128>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d10b      	bne.n	8001d9c <xPortStartScheduler+0x28>
        __asm volatile
 8001d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d88:	f383 8811 	msr	BASEPRI, r3
 8001d8c:	f3bf 8f6f 	isb	sy
 8001d90:	f3bf 8f4f 	dsb	sy
 8001d94:	613b      	str	r3, [r7, #16]
    }
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	e7fd      	b.n	8001d98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e98 <xPortStartScheduler+0x124>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea0 <xPortStartScheduler+0x12c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10b      	bne.n	8001dbe <xPortStartScheduler+0x4a>
        __asm volatile
 8001da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001daa:	f383 8811 	msr	BASEPRI, r3
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f3bf 8f4f 	dsb	sy
 8001db6:	60fb      	str	r3, [r7, #12]
    }
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	e7fd      	b.n	8001dba <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001dbe:	4b39      	ldr	r3, [pc, #228]	@ (8001ea4 <xPortStartScheduler+0x130>)
 8001dc0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	22ff      	movs	r2, #255	@ 0xff
 8001dce:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b31      	ldr	r3, [pc, #196]	@ (8001ea8 <xPortStartScheduler+0x134>)
 8001de4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001de6:	4b31      	ldr	r3, [pc, #196]	@ (8001eac <xPortStartScheduler+0x138>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001dec:	e009      	b.n	8001e02 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8001dee:	4b2f      	ldr	r3, [pc, #188]	@ (8001eac <xPortStartScheduler+0x138>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	4a2d      	ldr	r2, [pc, #180]	@ (8001eac <xPortStartScheduler+0x138>)
 8001df6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0a:	2b80      	cmp	r3, #128	@ 0x80
 8001e0c:	d0ef      	beq.n	8001dee <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001e0e:	4b27      	ldr	r3, [pc, #156]	@ (8001eac <xPortStartScheduler+0x138>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d00b      	beq.n	8001e32 <xPortStartScheduler+0xbe>
        __asm volatile
 8001e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	60bb      	str	r3, [r7, #8]
    }
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	e7fd      	b.n	8001e2e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <xPortStartScheduler+0x138>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	4a1c      	ldr	r2, [pc, #112]	@ (8001eac <xPortStartScheduler+0x138>)
 8001e3a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <xPortStartScheduler+0x138>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e44:	4a19      	ldr	r2, [pc, #100]	@ (8001eac <xPortStartScheduler+0x138>)
 8001e46:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <xPortStartScheduler+0x13c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <xPortStartScheduler+0x13c>)
 8001e56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e5a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <xPortStartScheduler+0x13c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a13      	ldr	r2, [pc, #76]	@ (8001eb0 <xPortStartScheduler+0x13c>)
 8001e62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001e66:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001e68:	f000 f8e0 	bl	800202c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <xPortStartScheduler+0x140>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001e72:	f000 f8f5 	bl	8002060 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <xPortStartScheduler+0x144>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <xPortStartScheduler+0x144>)
 8001e7c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001e80:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001e82:	f7ff ff61 	bl	8001d48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001e86:	f7ff f8f1 	bl	800106c <vTaskSwitchContext>
    prvTaskExitError();
 8001e8a:	f7ff ff1b 	bl	8001cc4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	e000ed00 	.word	0xe000ed00
 8001e9c:	410fc271 	.word	0x410fc271
 8001ea0:	410fc270 	.word	0x410fc270
 8001ea4:	e000e400 	.word	0xe000e400
 8001ea8:	20000164 	.word	0x20000164
 8001eac:	20000168 	.word	0x20000168
 8001eb0:	e000ed20 	.word	0xe000ed20
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	e000ef34 	.word	0xe000ef34

08001ebc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
        __asm volatile
 8001ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec6:	f383 8811 	msr	BASEPRI, r3
 8001eca:	f3bf 8f6f 	isb	sy
 8001ece:	f3bf 8f4f 	dsb	sy
 8001ed2:	607b      	str	r3, [r7, #4]
    }
 8001ed4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	@ (8001f18 <vPortEnterCritical+0x5c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a0e      	ldr	r2, [pc, #56]	@ (8001f18 <vPortEnterCritical+0x5c>)
 8001ede:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <vPortEnterCritical+0x5c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d110      	bne.n	8001f0a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <vPortEnterCritical+0x60>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <vPortEnterCritical+0x4e>
        __asm volatile
 8001ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef6:	f383 8811 	msr	BASEPRI, r3
 8001efa:	f3bf 8f6f 	isb	sy
 8001efe:	f3bf 8f4f 	dsb	sy
 8001f02:	603b      	str	r3, [r7, #0]
    }
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	e7fd      	b.n	8001f06 <vPortEnterCritical+0x4a>
    }
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000004 	.word	0x20000004
 8001f1c:	e000ed04 	.word	0xe000ed04

08001f20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001f26:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <vPortExitCritical+0x50>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10b      	bne.n	8001f46 <vPortExitCritical+0x26>
        __asm volatile
 8001f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f32:	f383 8811 	msr	BASEPRI, r3
 8001f36:	f3bf 8f6f 	isb	sy
 8001f3a:	f3bf 8f4f 	dsb	sy
 8001f3e:	607b      	str	r3, [r7, #4]
    }
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	e7fd      	b.n	8001f42 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <vPortExitCritical+0x50>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	4a08      	ldr	r2, [pc, #32]	@ (8001f70 <vPortExitCritical+0x50>)
 8001f4e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <vPortExitCritical+0x50>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <vPortExitCritical+0x44>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001f62:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	20000004 	.word	0x20000004
	...

08001f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001f80:	f3ef 8009 	mrs	r0, PSP
 8001f84:	f3bf 8f6f 	isb	sy
 8001f88:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <pxCurrentTCBConst>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	f01e 0f10 	tst.w	lr, #16
 8001f90:	bf08      	it	eq
 8001f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9a:	6010      	str	r0, [r2, #0]
 8001f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001fa0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001fa4:	f380 8811 	msr	BASEPRI, r0
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f7ff f85c 	bl	800106c <vTaskSwitchContext>
 8001fb4:	f04f 0000 	mov.w	r0, #0
 8001fb8:	f380 8811 	msr	BASEPRI, r0
 8001fbc:	bc09      	pop	{r0, r3}
 8001fbe:	6819      	ldr	r1, [r3, #0]
 8001fc0:	6808      	ldr	r0, [r1, #0]
 8001fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc6:	f01e 0f10 	tst.w	lr, #16
 8001fca:	bf08      	it	eq
 8001fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001fd0:	f380 8809 	msr	PSP, r0
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	f3af 8000 	nop.w

08001fe0 <pxCurrentTCBConst>:
 8001fe0:	20000024 	.word	0x20000024
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop

08001fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
        __asm volatile
 8001fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff2:	f383 8811 	msr	BASEPRI, r3
 8001ff6:	f3bf 8f6f 	isb	sy
 8001ffa:	f3bf 8f4f 	dsb	sy
 8001ffe:	607b      	str	r3, [r7, #4]
    }
 8002000:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002002:	f7fe ff1b 	bl	8000e3c <xTaskIncrementTick>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <SysTick_Handler+0x40>)
 800200e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	f383 8811 	msr	BASEPRI, r3
    }
 800201e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	e000ed04 	.word	0xe000ed04

0800202c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002030:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <vPortSetupTimerInterrupt+0x28>)
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <vPortSetupTimerInterrupt+0x2c>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800203c:	4b07      	ldr	r3, [pc, #28]	@ (800205c <vPortSetupTimerInterrupt+0x30>)
 800203e:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8002042:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <vPortSetupTimerInterrupt+0x28>)
 8002046:	2207      	movs	r2, #7
 8002048:	601a      	str	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e010 	.word	0xe000e010
 8002058:	e000e018 	.word	0xe000e018
 800205c:	e000e014 	.word	0xe000e014

08002060 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002060:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002070 <vPortEnableVFP+0x10>
 8002064:	6801      	ldr	r1, [r0, #0]
 8002066:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800206a:	6001      	str	r1, [r0, #0]
 800206c:	4770      	bx	lr
 800206e:	0000      	.short	0x0000
 8002070:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop

08002078 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	@ 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002084:	f7fe fdc0 	bl	8000c08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002088:	4b54      	ldr	r3, [pc, #336]	@ (80021dc <pvPortMalloc+0x164>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002090:	f000 f90c 	bl	80022ac <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800209a:	2208      	movs	r2, #8
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	3308      	adds	r3, #8
 80020a6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d804      	bhi.n	80020bc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	4413      	add	r3, r2
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	e001      	b.n	80020c0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db71      	blt.n	80021aa <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d06e      	beq.n	80021aa <pvPortMalloc+0x132>
 80020cc:	4b44      	ldr	r3, [pc, #272]	@ (80021e0 <pvPortMalloc+0x168>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d869      	bhi.n	80021aa <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80020d6:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <pvPortMalloc+0x16c>)
 80020d8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80020da:	4b42      	ldr	r3, [pc, #264]	@ (80021e4 <pvPortMalloc+0x16c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020e0:	e004      	b.n	80020ec <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d903      	bls.n	80020fe <pvPortMalloc+0x86>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f1      	bne.n	80020e2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80020fe:	4b37      	ldr	r3, [pc, #220]	@ (80021dc <pvPortMalloc+0x164>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002104:	429a      	cmp	r2, r3
 8002106:	d050      	beq.n	80021aa <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2208      	movs	r2, #8
 800210e:	4413      	add	r3, r2
 8002110:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	1ad2      	subs	r2, r2, r3
 8002122:	2308      	movs	r3, #8
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	429a      	cmp	r2, r3
 8002128:	d920      	bls.n	800216c <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <pvPortMalloc+0xdc>
        __asm volatile
 800213c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002140:	f383 8811 	msr	BASEPRI, r3
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	613b      	str	r3, [r7, #16]
    }
 800214e:	bf00      	nop
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad2      	subs	r2, r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f000 f8fc 	bl	8002364 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800216c:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <pvPortMalloc+0x168>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <pvPortMalloc+0x168>)
 8002178:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <pvPortMalloc+0x168>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <pvPortMalloc+0x170>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d203      	bcs.n	800218e <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002186:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <pvPortMalloc+0x168>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <pvPortMalloc+0x170>)
 800218c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <pvPortMalloc+0x174>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <pvPortMalloc+0x174>)
 80021a8:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80021aa:	f7fe fd3b 	bl	8000c24 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00b      	beq.n	80021d0 <pvPortMalloc+0x158>
        __asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	60fb      	str	r3, [r7, #12]
    }
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <pvPortMalloc+0x154>
    return pvReturn;
 80021d0:	69fb      	ldr	r3, [r7, #28]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	@ 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20001d74 	.word	0x20001d74
 80021e0:	20001d78 	.word	0x20001d78
 80021e4:	20001d6c 	.word	0x20001d6c
 80021e8:	20001d7c 	.word	0x20001d7c
 80021ec:	20001d80 	.word	0x20001d80

080021f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04b      	beq.n	800229a <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002202:	2308      	movs	r3, #8
 8002204:	425b      	negs	r3, r3
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0b      	blt.n	8002230 <vPortFree+0x40>
        __asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	60fb      	str	r3, [r7, #12]
    }
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <vPortFree+0x60>
        __asm volatile
 8002238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	60bb      	str	r3, [r7, #8]
    }
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0fdb      	lsrs	r3, r3, #31
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d01c      	beq.n	800229a <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d118      	bne.n	800229a <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002274:	f7fe fcc8 	bl	8000c08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <vPortFree+0xb4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <vPortFree+0xb4>)
 8002284:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002286:	6938      	ldr	r0, [r7, #16]
 8002288:	f000 f86c 	bl	8002364 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800228c:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <vPortFree+0xb8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <vPortFree+0xb8>)
 8002294:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002296:	f7fe fcc5 	bl	8000c24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20001d78 	.word	0x20001d78
 80022a8:	20001d84 	.word	0x20001d84

080022ac <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022b2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80022b6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <prvHeapInit+0xa4>)
 80022ba:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3307      	adds	r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0307 	bic.w	r3, r3, #7
 80022d2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <prvHeapInit+0xa4>)
 80022dc:	4413      	add	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002354 <prvHeapInit+0xa8>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80022ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <prvHeapInit+0xa8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80022f8:	2208      	movs	r2, #8
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4a13      	ldr	r2, [pc, #76]	@ (8002358 <prvHeapInit+0xac>)
 800230c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800230e:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <prvHeapInit+0xac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002316:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <prvHeapInit+0xac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <prvHeapInit+0xac>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a08      	ldr	r2, [pc, #32]	@ (800235c <prvHeapInit+0xb0>)
 800233a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <prvHeapInit+0xb4>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	2000016c 	.word	0x2000016c
 8002354:	20001d6c 	.word	0x20001d6c
 8002358:	20001d74 	.word	0x20001d74
 800235c:	20001d7c 	.word	0x20001d7c
 8002360:	20001d78 	.word	0x20001d78

08002364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800236c:	4b28      	ldr	r3, [pc, #160]	@ (8002410 <prvInsertBlockIntoFreeList+0xac>)
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	e002      	b.n	8002378 <prvInsertBlockIntoFreeList+0x14>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	d8f7      	bhi.n	8002372 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	4413      	add	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d108      	bne.n	80023a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	441a      	add	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	441a      	add	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d118      	bne.n	80023ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <prvInsertBlockIntoFreeList+0xb0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d00d      	beq.n	80023e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e008      	b.n	80023f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <prvInsertBlockIntoFreeList+0xb0>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e003      	b.n	80023f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d002      	beq.n	8002402 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20001d6c 	.word	0x20001d6c
 8002414:	20001d74 	.word	0x20001d74

08002418 <vLedTask>:
const uint32_t blueLed 		= (uint32_t) (1U<<15);

void vLedTask(void *pvParameters);


void vLedTask(void *pvParameters){
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	uint32_t *ledPin;
	ledPin = (uint32_t *) pvParameters;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60fb      	str	r3, [r7, #12]
	while(1){
		//Toggle user leds on PD12
		GPIOD->ODR ^= *ledPin;
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <vLedTask+0x28>)
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4904      	ldr	r1, [pc, #16]	@ (8002440 <vLedTask+0x28>)
 800242e:	4053      	eors	r3, r2
 8002430:	614b      	str	r3, [r1, #20]
		vTaskDelay(pdMS_TO_TICKS(1000));
 8002432:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002436:	f7fe fb5f 	bl	8000af8 <vTaskDelay>
		GPIOD->ODR ^= *ledPin;
 800243a:	bf00      	nop
 800243c:	e7f2      	b.n	8002424 <vLedTask+0xc>
 800243e:	bf00      	nop
 8002440:	40020c00 	.word	0x40020c00

08002444 <main>:
		//for(uint32_t i=0;i<1000000; i++);
	}
}


int main(void){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af02      	add	r7, sp, #8

	// Initialize the GPIO for the LED
	//enable clock access to GPIOA
	RCC->AHB1ENR |= GPIODEN;
 800244a:	4b32      	ldr	r3, [pc, #200]	@ (8002514 <main+0xd0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a31      	ldr	r2, [pc, #196]	@ (8002514 <main+0xd0>)
 8002450:	f043 0308 	orr.w	r3, r3, #8
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30

	//set PD12 as output pin
	GPIOD->MODER |=(1<<24);
 8002456:	4b30      	ldr	r3, [pc, #192]	@ (8002518 <main+0xd4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2f      	ldr	r2, [pc, #188]	@ (8002518 <main+0xd4>)
 800245c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002460:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<25);
 8002462:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <main+0xd4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2c      	ldr	r2, [pc, #176]	@ (8002518 <main+0xd4>)
 8002468:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800246c:	6013      	str	r3, [r2, #0]

	//set PD13 as output pin
	GPIOD->MODER |=(1<<26);
 800246e:	4b2a      	ldr	r3, [pc, #168]	@ (8002518 <main+0xd4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a29      	ldr	r2, [pc, #164]	@ (8002518 <main+0xd4>)
 8002474:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002478:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<27);
 800247a:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <main+0xd4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a26      	ldr	r2, [pc, #152]	@ (8002518 <main+0xd4>)
 8002480:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8002484:	6013      	str	r3, [r2, #0]

	//set PD14 as output pin
	GPIOD->MODER |=(1<<28);
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <main+0xd4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a23      	ldr	r2, [pc, #140]	@ (8002518 <main+0xd4>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002490:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<29);
 8002492:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <main+0xd4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a20      	ldr	r2, [pc, #128]	@ (8002518 <main+0xd4>)
 8002498:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800249c:	6013      	str	r3, [r2, #0]

	//set PD15 as output pin
	GPIOD->MODER |=(1<<30);
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <main+0xd4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002518 <main+0xd4>)
 80024a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024a8:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &=~(1<<31);
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <main+0xd4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <main+0xd4>)
 80024b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024b4:	6013      	str	r3, [r2, #0]

	//set all leds to 0
	GPIOD->ODR = 0;
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <main+0xd4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]

	// Create the FreeRTOS task to blink the LED
	xTaskCreate(vLedTask, "led tasks", 128, (void *) &greenLed , 1, NULL);
 80024bc:	2300      	movs	r3, #0
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2301      	movs	r3, #1
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <main+0xd8>)
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	4915      	ldr	r1, [pc, #84]	@ (8002520 <main+0xdc>)
 80024ca:	4816      	ldr	r0, [pc, #88]	@ (8002524 <main+0xe0>)
 80024cc:	f7fe f9b4 	bl	8000838 <xTaskCreate>
	xTaskCreate(vLedTask, "led tasks", 128, (void *) &orangeLed, 1, NULL);
 80024d0:	2300      	movs	r3, #0
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	2301      	movs	r3, #1
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <main+0xe4>)
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	4910      	ldr	r1, [pc, #64]	@ (8002520 <main+0xdc>)
 80024de:	4811      	ldr	r0, [pc, #68]	@ (8002524 <main+0xe0>)
 80024e0:	f7fe f9aa 	bl	8000838 <xTaskCreate>
	xTaskCreate(vLedTask, "led tasks", 128, (void *) &redLed   , 1, NULL);
 80024e4:	2300      	movs	r3, #0
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2301      	movs	r3, #1
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <main+0xe8>)
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	490b      	ldr	r1, [pc, #44]	@ (8002520 <main+0xdc>)
 80024f2:	480c      	ldr	r0, [pc, #48]	@ (8002524 <main+0xe0>)
 80024f4:	f7fe f9a0 	bl	8000838 <xTaskCreate>
	xTaskCreate(vLedTask, "led tasks", 128, (void *) &blueLed  , 1, NULL);
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2301      	movs	r3, #1
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <main+0xec>)
 8002502:	2280      	movs	r2, #128	@ 0x80
 8002504:	4906      	ldr	r1, [pc, #24]	@ (8002520 <main+0xdc>)
 8002506:	4807      	ldr	r0, [pc, #28]	@ (8002524 <main+0xe0>)
 8002508:	f7fe f996 	bl	8000838 <xTaskCreate>


	// Start the scheduler
	vTaskStartScheduler();
 800250c:	f7fe fb2a 	bl	8000b64 <vTaskStartScheduler>

	// The scheduler should never return, but just in case:
	while(1);
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <main+0xcc>
 8002514:	40023800 	.word	0x40023800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	08002630 	.word	0x08002630
 8002520:	08002624 	.word	0x08002624
 8002524:	08002419 	.word	0x08002419
 8002528:	08002634 	.word	0x08002634
 800252c:	08002638 	.word	0x08002638
 8002530:	0800263c 	.word	0x0800263c

08002534 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002534:	480d      	ldr	r0, [pc, #52]	@ (800256c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002536:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002538:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	@ (8002570 <LoopForever+0x6>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	@ (8002574 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <LoopForever+0xe>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <LoopForever+0x16>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002562:	f000 f819 	bl	8002598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002566:	f7ff ff6d 	bl	8002444 <main>

0800256a <LoopForever>:

LoopForever:
  b LoopForever
 800256a:	e7fe      	b.n	800256a <LoopForever>
  ldr   r0, =_estack
 800256c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8002578:	08002648 	.word	0x08002648
  ldr r2, =_sbss
 800257c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8002580:	20001d88 	.word	0x20001d88

08002584 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC_IRQHandler>

08002586 <memset>:
 8002586:	4402      	add	r2, r0
 8002588:	4603      	mov	r3, r0
 800258a:	4293      	cmp	r3, r2
 800258c:	d100      	bne.n	8002590 <memset+0xa>
 800258e:	4770      	bx	lr
 8002590:	f803 1b01 	strb.w	r1, [r3], #1
 8002594:	e7f9      	b.n	800258a <memset+0x4>
	...

08002598 <__libc_init_array>:
 8002598:	b570      	push	{r4, r5, r6, lr}
 800259a:	4d0d      	ldr	r5, [pc, #52]	@ (80025d0 <__libc_init_array+0x38>)
 800259c:	4c0d      	ldr	r4, [pc, #52]	@ (80025d4 <__libc_init_array+0x3c>)
 800259e:	1b64      	subs	r4, r4, r5
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	2600      	movs	r6, #0
 80025a4:	42a6      	cmp	r6, r4
 80025a6:	d109      	bne.n	80025bc <__libc_init_array+0x24>
 80025a8:	4d0b      	ldr	r5, [pc, #44]	@ (80025d8 <__libc_init_array+0x40>)
 80025aa:	4c0c      	ldr	r4, [pc, #48]	@ (80025dc <__libc_init_array+0x44>)
 80025ac:	f000 f826 	bl	80025fc <_init>
 80025b0:	1b64      	subs	r4, r4, r5
 80025b2:	10a4      	asrs	r4, r4, #2
 80025b4:	2600      	movs	r6, #0
 80025b6:	42a6      	cmp	r6, r4
 80025b8:	d105      	bne.n	80025c6 <__libc_init_array+0x2e>
 80025ba:	bd70      	pop	{r4, r5, r6, pc}
 80025bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c0:	4798      	blx	r3
 80025c2:	3601      	adds	r6, #1
 80025c4:	e7ee      	b.n	80025a4 <__libc_init_array+0xc>
 80025c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ca:	4798      	blx	r3
 80025cc:	3601      	adds	r6, #1
 80025ce:	e7f2      	b.n	80025b6 <__libc_init_array+0x1e>
 80025d0:	08002640 	.word	0x08002640
 80025d4:	08002640 	.word	0x08002640
 80025d8:	08002640 	.word	0x08002640
 80025dc:	08002644 	.word	0x08002644

080025e0 <memcpy>:
 80025e0:	440a      	add	r2, r1
 80025e2:	4291      	cmp	r1, r2
 80025e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80025e8:	d100      	bne.n	80025ec <memcpy+0xc>
 80025ea:	4770      	bx	lr
 80025ec:	b510      	push	{r4, lr}
 80025ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80025f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80025f6:	4291      	cmp	r1, r2
 80025f8:	d1f9      	bne.n	80025ee <memcpy+0xe>
 80025fa:	bd10      	pop	{r4, pc}

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
